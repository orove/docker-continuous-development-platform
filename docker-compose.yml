#################################################################
#                                                               #
# Script para levantar plataforma de desarrollo continuo con    #
# los siguientes servicios en contenedores docker:              #
#                                                               #
#    NOMBRE SERVICIO                      PUERTO EN LOCALHOST   #
#  - Nginx                                             80       #
#  - Apache (Aplicaciones PHP)                      48082       #
#  - Tomcat (Aplicaciones JAVA)                     48084       #
#  - Nexus (Repositorio de Componentes)             48081       #
#  - Jenkins (Integraci贸n Continua)                 48080       #
#  - SonarQube (Inspecci贸n de C贸digo)               49000       #
#  - MySQL (Base de Datos de SonarQube)             43306       #
#  - MySQL (Base de Datos de Aplicaciones Web)      43307       #
#                                                               #
#################################################################

version: '2.1'

#################################################################
# Configuracion de Red
#################################################################
networks:
    orovenet:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: ${OROVENET_SUBNET}
                  gateway: ${OROVENET_GATEWAY}


#################################################################
# Configuraci贸n de Servicios
#################################################################
services:

    ########################## NGINX ############################
    nginx:
        image: nginx
        volumes:
            - ${DATA_VOLUMES_PATH}/nginx/html:/usr/share/nginx/html/
            - ${DATA_VOLUMES_PATH}/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
            - ${DATA_VOLUMES_PATH}/comun/verificar-servicio.sh:/bin/verificar-servicio.sh
        healthcheck:    
            # esperar a que el servicio de Nginx comience a recibir peticiones en el puerto 80
            test: "verificar-servicio.sh 3 Nginx 80" 
            interval: 15s
            retries: 4 
        ports:
            - "80:80"
        networks:
            orovenet:
                ipv4_address: ${OROVENET_IP_SERVICIO_NGINX}
        extra_hosts:
            - "jenkins:${OROVENET_IP_SERVICIO_JENKINS}"
            - "sonarqube:${OROVENET_IP_SERVICIO_SONARQUBE}"
            - "nexus:${OROVENET_IP_SERVICIO_NEXUS}"
            - "selenium:${OROVENET_IP_SERVICIO_SELENIUM}"
            - "tomcat:${OROVENET_IP_SERVICIO_TOMCAT}"
            - "apache:${OROVENET_IP_SERVICIO_APACHE}"


    ######################## SONARQUBE ##########################
    sonarqube:
        image: sonarqube:6.2
        depends_on:
            - mysql-sonarqube
        depends_on:
            mysql-sonarqube: 
                condition: service_healthy
        links:
            - mysql-sonarqube:mysqlserver
        ports:
            - "49000:9000"
        environment:
            - SONARQUBE_JDBC_USERNAME=sonar
            - SONARQUBE_JDBC_PASSWORD=sonar
            - SONARQUBE_JDBC_URL=jdbc:mysql://mysqlserver:3306/sonar?verifyServerCertificate=false&useSSL=false&useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true
        networks:
            orovenet:
                ipv4_address: ${OROVENET_IP_SERVICIO_SONARQUBE}
        volumes:
            - ${DATA_VOLUMES_PATH}/comun/verificar-servicio.sh:/bin/verificar-servicio.sh
        healthcheck:    
            # esperar a que el servicio de SonarQube comience a recibir peticiones en el puerto 9000
            test: "verificar-servicio.sh 5 SonarQube 9000" 
            interval: 15s
            retries: 5
        extra_hosts:
            - "nginx:${OROVENET_IP_SERVICIO_NGINX}"
            - "jenkins:${OROVENET_IP_SERVICIO_JENKINS}"
            - "sonarqube:${OROVENET_IP_SERVICIO_SONARQUBE}"
            - "nexus:${OROVENET_IP_SERVICIO_NEXUS}"
            - "selenium:${OROVENET_IP_SERVICIO_SELENIUM}"
            - "tomcat:${OROVENET_IP_SERVICIO_TOMCAT}"
            - "apache:${OROVENET_IP_SERVICIO_APACHE}"
            - "mysqlserver:${OROVENET_IP_SERVICIO_MYSQL}"


    ##################### MYSQL-SONARQUBE ########################
    mysql-sonarqube:
        image: mysql:5.7
        ports:
            - "43306:3306"
        environment:
            - MYSQL_ROOT_PASSWORD=sonar
            - MYSQL_DATABASE=sonar
            - MYSQL_USER=sonar
            - MYSQL_PASSWORD=sonar
        volumes:
            - ${DATA_VOLUMES_PATH}/mysql:/var/lib/mysql
            - ${DATA_VOLUMES_PATH}/comun/verificar-servicio.sh:/bin/verificar-servicio.sh
        networks:
            orovenet:
                ipv4_address: ${OROVENET_IP_SERVICIO_MYSQL}
        healthcheck:    
            # esperar hasta 180 segundos a que el servicio de MySQL comience a recibir peticiones en el puerto 3306
            test: "verificar-servicio.sh 5 MySQL 3306" 
            interval: 15s
            retries: 5
        extra_hosts:
            - "nginx:${OROVENET_IP_SERVICIO_NGINX}"
            - "jenkins:${OROVENET_IP_SERVICIO_JENKINS}"
            - "sonarqube:${OROVENET_IP_SERVICIO_SONARQUBE}"
            - "nexus:${OROVENET_IP_SERVICIO_NEXUS}"
            - "selenium:${OROVENET_IP_SERVICIO_SELENIUM}"
            
    ########################## JENKINS ###########################
    jenkins:
        image: jenkins:2.32.3
        ports:
            - "48080:8080"
        volumes:
            - ${DATA_VOLUMES_PATH}/jenkins:/var/jenkins_home
            - ${DATA_VOLUMES_PATH}/comun/verificar-servicio.sh:/bin/verificar-servicio.sh
        healthcheck:    
            # esperar hasta 60 segundos a que el servicio de Jenkins comience a recibir peticiones en el puerto 8080
            test: "verificar-servicio.sh 5 Jenkins 8080" 
            interval: 15s
            retries: 5
        networks:
            orovenet:
                ipv4_address: ${OROVENET_IP_SERVICIO_JENKINS}
        extra_hosts:
            - "nginx:${OROVENET_IP_SERVICIO_NGINX}"
            - "sonarqube:${OROVENET_IP_SERVICIO_SONARQUBE}"
            - "nexus:${OROVENET_IP_SERVICIO_NEXUS}"
            - "selenium:${OROVENET_IP_SERVICIO_SELENIUM}"
            - "tomcat:${OROVENET_IP_SERVICIO_TOMCAT}"
            - "apache:${OROVENET_IP_SERVICIO_APACHE}"



    ########################### NEXUS ###########################
    nexus:
        image: clearent/nexus
        ports:
            - "48081:8081"
        volumes:
            - ${DATA_VOLUMES_PATH}/nexus:/nexus-data
            - ${DATA_VOLUMES_PATH}/comun/verificar-servicio.sh:/bin/verificar-servicio.sh
        healthcheck:    
            # esperar hasta 120 segundos a que el servicio de Nexus comience a recibir peticiones en el puerto 8081
            test: "verificar-servicio.sh 10 Nexus 8081" 
            interval: 30s
            retries: 30
        networks:
            orovenet:
                ipv4_address: ${OROVENET_IP_SERVICIO_NEXUS}
        extra_hosts:
            - "nginx:${OROVENET_IP_SERVICIO_NGINX}"
            - "jenkins:${OROVENET_IP_SERVICIO_JENKINS}"
            - "sonarqube:${OROVENET_IP_SERVICIO_SONARQUBE}"
            - "selenium:${OROVENET_IP_SERVICIO_SELENIUM}"
            - "tomcat:${OROVENET_IP_SERVICIO_TOMCAT}"
            - "apache:${OROVENET_IP_SERVICIO_APACHE}"


    ######################## SELENIUM ##########################
    selenium:
        image: selenium/standalone-chrome-debug
        volumes:
            - ${DATA_VOLUMES_PATH}/comun/verificar-servicio.sh:/bin/verificar-servicio.sh
        healthcheck:    
            # esperar a que el servicio de Selenium comience a recibir peticiones en el puerto 4444
            test: "verificar-servicio.sh 5 Selenium 4444" 
            interval: 15s
            retries: 5
        ports:
            - "44444:4444"
            - "45900:5900"
        networks:
            orovenet:
                ipv4_address: ${OROVENET_IP_SERVICIO_SELENIUM}
        extra_hosts:
            - "nginx:${OROVENET_IP_SERVICIO_NGINX}"
            - "jenkins:${OROVENET_IP_SERVICIO_JENKINS}"
            - "sonarqube:${OROVENET_IP_SERVICIO_SONARQUBE}"
            - "nexus:${OROVENET_IP_SERVICIO_NEXUS}"
            - "tomcat:${OROVENET_IP_SERVICIO_TOMCAT}"
            - "apache:${OROVENET_IP_SERVICIO_APACHE}"



